[{"className": "NoDependencyTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "public class NoDependencyTest {\r\n    @org.junit.jupiter.api.Test\r\n    void test1() {\r\n        var val = 2 + 3;\r\n        System.out.println(val == 5);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void test2() {\r\n        var val = 2 * 3;\r\n        System.out.println(val == 6);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void test3() {\r\n        var s = \"Te\";\r\n        s += \"st\";\r\n        System.out.println(\"Test\" == s);\r\n    }\r\n}", "imports": [], "package": ""}, {"className": "ConstantTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class ConstantTest {\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void getConstant() {\r\n        System.out.println(Constant.constant == new Constant().getConstant());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void noConstant() {\r\n        System.out.println(new Constant().noConstant() > 0);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void multipleCallsInOneTest() {\r\n        System.out.println(Constant.constant == new Constant().getConstant());\r\n        System.out.println(new Constant().noConstant() > 0);\r\n    }\r\n}", "imports": [], "package": "package org.group9.Constant;"}, {"className": "EncryptTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class EncryptTest {\r\n\r\n    @Test\r\n    void encryptData() throws Exception {\r\n        var simulatedFile = \"\"\"\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras a dolor mollis, interdum tortor imperdiet, dignissim libero. Praesent id mattis metus. In vitae dapibus sem. Aliquam ante enim, porta at tincidunt eget, gravida ac nisl. Suspendisse hendrerit sagittis ultricies. Donec tristique urna vehicula tellus pharetra, non consequat lectus elementum. Vivamus congue magna massa, at tristique erat blandit in. Nulla vel mattis sapien. Sed vitae consequat dui, vel interdum ex. Fusce eu ex quis lorem aliquet dictum. Curabitur rhoncus semper ipsum, et faucibus tortor feugiat posuere.                 \r\n                Praesent efficitur, elit in vehicula pharetra, sapien enim posuere sem, id blandit purus ipsum vitae nulla. Praesent fermentum gravida luctus. Nam dictum nunc sapien, vitae euismod mauris imperdiet semper. Curabitur ipsum turpis, tempus eget finibus vel, tincidunt auctor ipsum. Mauris lectus lacus, convallis id lacus eget, iaculis sodales sem. In arcu eros, volutpat at nibh sit amet, lacinia ultricies neque. Vestibulum non purus sit amet ipsum eleifend tempor vitae eget velit. Donec eget convallis ante. Duis ultricies mattis quam, vel feugiat massa aliquet eu. Morbi elementum cursus odio, ac feugiat ipsum vulputate nec. Vivamus pulvinar ornare enim. Suspendisse potenti. Nullam a urna quis purus imperdiet ultricies.           \r\n                Nunc ac aliquam neque, ac mollis risus. Sed sed est at ipsum egestas placerat. Suspendisse vulputate erat in neque dictum dignissim. Pellentesque id ligula eget ante molestie porttitor laoreet id mi. Proin non mi augue. Nulla facilisi. Mauris consectetur tempor augue, quis commodo risus efficitur consequat. Duis semper ac nisi viverra vestibulum. Phasellus id congue libero, at gravida tortor.          \r\n                Quisque ligula elit, dignissim ac ipsum a, faucibus posuere augue. Nunc eget orci quam. Curabitur hendrerit commodo enim et tempus. Aenean tincidunt tortor eget quam porta, eu ornare nulla aliquam. Proin vel fringilla orci. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Pellentesque mollis eget nisi sed auctor. Cras non mi luctus, placerat nisi vel, molestie nulla. Nam pretium vel justo ac consectetur. Morbi imperdiet dignissim urna nec porttitor. Nunc mi ipsum, tincidunt ut pharetra nec, consectetur a dui. Donec accumsan aliquam magna, quis egestas orci blandit in.             \r\n                Morbi euismod, lorem at tincidunt gravida, felis metus aliquet metus, in finibus velit felis eu tellus. Maecenas a quam nec velit molestie sollicitudin et eget sem. Sed vel odio consectetur, ultrices sapien ac, mollis velit. In ultrices consequat eleifend. Morbi quis massa et elit vulputate gravida. In eu erat non turpis condimentum hendrerit sed id urna. Nunc eu elit ullamcorper, pretium quam nec, porttitor augue. Nam nisi mauris, commodo nec fermentum id, venenatis at ipsum. Morbi ut volutpat turpis.\r\n                \"\"\";\r\n        assertDoesNotThrow(() -> new Encrypt().EncryptData(simulatedFile.getBytes()));\r\n    }\r\n\r\n    @Test\r\n    void encryptDataFile() {\r\n        assertDoesNotThrow(() -> new Encrypt().EncryptData(\"./src/test/test.txt\"));\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Crypto;"}, {"className": "UseEnumTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class UseEnumTest {\r\n\r\n    @Test\r\n    void enumToInt() {\r\n        assertEquals(0, new UseEnum().enumToInt(TestEnum.Option1));\r\n    }\r\n\r\n    @Test\r\n    void intToEnum() {\r\n        assertEquals(TestEnum.Option2, new UseEnum().intToEnum(1));\r\n    }\r\n\r\n    @Test\r\n    void listEnums() {\r\n        assertIterableEquals(Arrays.stream(new String[]{\"Option1\", \"Option2\", \"Option3\"}).toList(), new UseEnum().listEnums());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(0, new UseEnum().enumToInt(TestEnum.Option1));\r\n        assertIterableEquals(Arrays.stream(new String[]{\"Option1\", \"Option2\", \"Option3\"}).toList(), new UseEnum().listEnums());\r\n    }\r\n}", "imports": ["import org.group9.Constant.Constant;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Enums;"}, {"className": "RectangleTest", "fields": ["Rectangle"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class RectangleTest {\r\n    private final double width = 10.2;\r\n    private final double height = 5.5;\r\n\r\n    private Rectangle rect;\r\n    @org.junit.jupiter.api.BeforeEach\r\n    void setUp() {\r\n        rect = new Rectangle(width, height);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void width() {\r\n        assertEquals(width, rect.width());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void height() {\r\n        assertEquals(height, rect.height());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void area() {\r\n        assertEquals(width*height, rect.area());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void circumference() {\r\n        assertEquals(2*width+2*height, rect.circumference());\r\n    }\r\n}", "imports": ["import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Extend;"}, {"className": "SquareTest", "fields": ["Square"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class SquareTest {\r\n    private final double width = 4.4;\r\n\r\n    private Square sq;\r\n    @BeforeEach\r\n    void setUp() {\r\n        sq = new Square(width);\r\n    }\r\n\r\n    // Should be rerun if Rectangle width changes\r\n    @Test\r\n    void width() {\r\n        assertEquals(width, sq.width());\r\n    }\r\n\r\n    @Test\r\n    void height() {\r\n        assertEquals(width, sq.height());\r\n    }\r\n\r\n    @Test\r\n    void area() {\r\n        assertEquals(width*width, sq.area());\r\n    }\r\n\r\n    @Test\r\n    void circumference() {\r\n        assertEquals(4*width, sq.circumference());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(width, sq.width());\r\n        assertEquals(width, sq.height());\r\n        assertEquals(width*width, sq.area());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Extend;"}, {"className": "FibonacciTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class FibonacciTest {\r\n\r\n    @Test\r\n    void calculateFibonacci() {\r\n        assertEquals(1134903170, new Fibonacci().calculateFibonacci(45));\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "package": "package org.group9.Fibonacci;"}, {"className": "OverrideInterfaceTest", "fields": ["OverrideInterface"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class OverrideInterfaceTest {\r\n    OverrideInterface override;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        override = new OverrideInterface();\r\n    }\r\n\r\n    @Test\r\n    void DefaultNoOverride() {\r\n        assertEquals(\"Deflt\", override.DefaultNoOverride());\r\n    }\r\n\r\n    @Test\r\n    void defaultOverride() {\r\n        assertEquals(\"Overridden\", override.DefaultOverride());\r\n    }\r\n\r\n    @Test\r\n    void defaultOverrideAndExtend() {\r\n        assertEquals(\"Override and extended\", override.DefaultOverrideAndExtend());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(\"Overridden\", override.DefaultOverride());\r\n        assertEquals(\"Override and extended\", override.DefaultOverrideAndExtend());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Implement;"}, {"className": "MatrixOperationsTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class MatrixOperationsTest {\r\n\r\n    @Test\r\n    void multiply() {\r\n\r\n        double[][] m1 = { {10.4, 25.2, 1.2, 35.1, 2.33}, {1, 2, 4.8, 8.7, 5}, {7, 26, 4.01, 6.11, 0.11}, {0.3, 3.22, 6.1, 9.5, 22.22} };\r\n        double[][] m2 = { {7, 86.7, 6.5, 1.1}, {2.2, 3.3, 4.4, 5.5}, {1, 25.2, 5.2, 1.1}, {3.2, 1.2, 3.4, 4.4} };\r\n        double[][] expected = { {241.76, 1057.2, 304.06000000000006, 305.8}, {44.04, 224.7, 69.84, 55.66}, {129.762, 801.084, 201.526, 181.995}, {45.684000000000005, 201.756, 80.138, 66.55000000000001} };\r\n        var result = new MatrixOperations().Multiply(m1, m2);\r\n        assertArrayEquals(expected, result);\r\n    }\r\n\r\n    @Test\r\n    void rightRotate() {\r\n        double[][] m = { {10.4, 25.2, 1.2, 35.1, 2.33}, {1, 2, 4.8, 8.7, 5}, {7, 26, 4.01, 6.11, 0.11}, {0.3, 3.22, 6.1, 9.5, 22.22} };\r\n        var result = new MatrixOperations().RightRotate(m);\r\n    }\r\n\r\n    @Test\r\n    void determinant() {\r\n        double[][] m = { {7, 86.7, 6.5, 1.1}, {2.2, 3.3, 4.4, 5.5}, {1, 25.2, 5.2, 1.1}, {3.2, 1.2, 3.4, 4.4} };\r\n        var result = new MatrixOperations().Determinant(m);\r\n        assertEquals(-6257.248800000001, result);\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import java.math.BigInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Matrix;"}, {"className": "FinalClassTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class FinalClassTest {\r\n\r\n    @Test\r\n    void baz() {\r\n        assertEquals(10, new FinalClass().baz());\r\n    }\r\n\r\n    @Test\r\n    void foo() {\r\n        assertEquals(\"foo\", new FinalClass().foo());\r\n    }\r\n\r\n    @Test\r\n    void foobaz() {\r\n        assertEquals(\"foo10\", new FinalClass().foobaz());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(10, new FinalClass().baz());\r\n        assertEquals(\"foo\", new FinalClass().foo());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.NoInheritance;"}, {"className": "PrimeTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": ["BigInteger"], "classContent": "class PrimeTest {\r\n\r\n    @Test\r\n    void isPrime() {\r\n        BigInteger n = new BigInteger(\"433494437\");\r\n        var result = new Prime().IsPrime(n);\r\n        assertTrue(result);\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import java.math.BigInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Prime;"}, {"className": "SorterTest", "fields": ["Sorter"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class SorterTest {\r\n    Sorter sorter;\r\n    int[] arr;\r\n    int[] expected;\r\n    @BeforeEach\r\n    void setUp() {\r\n        sorter = new Sorter();\r\n        arr = new int[100000];\r\n        var random = new Random();\r\n        for (int i = 0; i < 100000; i++) {\r\n            arr[i] = random.nextInt();\r\n        }\r\n\r\n        expected = arr.clone();\r\n        Arrays.sort(expected);\r\n    }\r\n\r\n    @Test\r\n    void arraySort() {\r\n        Arrays.sort(arr);\r\n        assertArrayEquals(expected, arr);\r\n    }\r\n    @Test\r\n    void bubbleSort() {\r\n        sorter.BubbleSort(arr);\r\n        assertArrayEquals(expected, arr);\r\n    }\r\n\r\n    @Test\r\n    void selectionSort() {\r\n        sorter.SelectionSort(arr);\r\n        assertArrayEquals(expected, arr);\r\n    }\r\n\r\n    @Test\r\n    void insertionSort() {\r\n        sorter.InsertionSort(arr);\r\n        assertArrayEquals(expected, arr);\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Sorter;"}]