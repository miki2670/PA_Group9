[{"className": "NoDependencyTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "public class NoDependencyTest {\r\n    @org.junit.jupiter.api.Test\r\n    void test1() {\r\n        assertEquals(5, 2+3);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void test2() {\r\n        assertEquals(6, 2*3);\r\n    }\r\n\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void test3() {\r\n        var s = \"Te\";\r\n        s += \"st\";\r\n        assertEquals(\"Test\", s);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void test4() {\r\n        assertThrows(ArithmeticException.class, () -> { @SuppressWarnings({\"divzero\", \"NumericOverflow\"}) var a = 5/0; });\r\n    }\r\n}", "imports": ["import static org.junit.jupiter.api.Assertions.*;"], "package": ""}, {"className": "ConstantTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class ConstantTest {\r\n\r\n    @Test\r\n    void getConstant() {\r\n        assertEquals(Constant.constant, new Constant().getConstant());\r\n    }\r\n\r\n    @Test\r\n    void noConstant() {\r\n        assertTrue(new Constant().noConstant() > 0);\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(Constant.constant, new Constant().getConstant());\r\n        assertTrue(new Constant().noConstant() > 0);\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Constant;"}, {"className": "UseEnumTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class UseEnumTest {\r\n\r\n    @Test\r\n    void enumToInt() {\r\n        assertEquals(0, new UseEnum().enumToInt(TestEnum.Option1));\r\n    }\r\n\r\n    @Test\r\n    void intToEnum() {\r\n        assertEquals(TestEnum.Option2, new UseEnum().intToEnum(1));\r\n    }\r\n\r\n    @Test\r\n    void listEnums() {\r\n        assertIterableEquals(Arrays.stream(new String[]{\"Option1\", \"Option2\", \"Option3\"}).toList(), new UseEnum().listEnums());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(0, new UseEnum().enumToInt(TestEnum.Option1));\r\n        assertIterableEquals(Arrays.stream(new String[]{\"Option1\", \"Option2\", \"Option3\"}).toList(), new UseEnum().listEnums());\r\n    }\r\n}", "imports": ["import org.group9.Constant.Constant;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Enums;"}, {"className": "RectangleTest", "fields": ["Rectangle"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class RectangleTest {\r\n    private final double width = 10.2;\r\n    private final double height = 5.5;\r\n\r\n    private Rectangle rect;\r\n    @org.junit.jupiter.api.BeforeEach\r\n    void setUp() {\r\n        rect = new Rectangle(width, height);\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void width() {\r\n        assertEquals(width, rect.width());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void height() {\r\n        assertEquals(height, rect.height());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void area() {\r\n        assertEquals(width*height, rect.area());\r\n    }\r\n\r\n    @org.junit.jupiter.api.Test\r\n    void circumference() {\r\n        assertEquals(2*width+2*height, rect.circumference());\r\n    }\r\n}", "imports": ["import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Extend;"}, {"className": "SquareTest", "fields": ["Square"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class SquareTest {\r\n    private final double width = 4.4;\r\n\r\n    private Square sq;\r\n    @BeforeEach\r\n    void setUp() {\r\n        sq = new Square(width);\r\n    }\r\n\r\n    // Should be rerun if Rectangle width changes\r\n    @Test\r\n    void width() {\r\n        assertEquals(width, sq.width());\r\n    }\r\n\r\n    @Test\r\n    void height() {\r\n        assertEquals(width, sq.height());\r\n    }\r\n\r\n    @Test\r\n    void area() {\r\n        assertEquals(width*width, sq.area());\r\n    }\r\n\r\n    @Test\r\n    void circumference() {\r\n        assertEquals(4*width, sq.circumference());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(width, sq.width());\r\n        assertEquals(width, sq.height());\r\n        assertEquals(width*width, sq.area());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Extend;"}, {"className": "OverrideInterfaceTest", "fields": ["OverrideInterface"], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class OverrideInterfaceTest {\r\n    OverrideInterface override;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        override = new OverrideInterface();\r\n    }\r\n\r\n    @Test\r\n    void DefaultNoOverride() {\r\n        assertEquals(\"Deflt\", override.DefaultNoOverride());\r\n    }\r\n\r\n    @Test\r\n    void defaultOverride() {\r\n        assertEquals(\"Overridden\", override.DefaultOverride());\r\n    }\r\n\r\n    @Test\r\n    void defaultOverrideAndExtend() {\r\n        assertEquals(\"Override and extended\", override.DefaultOverrideAndExtend());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(\"Overridden\", override.DefaultOverride());\r\n        assertEquals(\"Override and extended\", override.DefaultOverrideAndExtend());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.Implement;"}, {"className": "FinalClassTest", "fields": [], "innerClasses": [], "realizations": "", "inheritance": "", "aggregation": [], "classContent": "class FinalClassTest {\r\n\r\n    @Test\r\n    void baz() {\r\n        assertEquals(10, new FinalClass().baz());\r\n    }\r\n\r\n    @Test\r\n    void foo() {\r\n        assertEquals(\"foo\", new FinalClass().foo());\r\n    }\r\n\r\n    @Test\r\n    void foobaz() {\r\n        assertEquals(\"foo10\", new FinalClass().foobaz());\r\n    }\r\n\r\n    @Test\r\n    void multipleCallsInOneTest() {\r\n        assertEquals(10, new FinalClass().baz());\r\n        assertEquals(\"foo\", new FinalClass().foo());\r\n    }\r\n}", "imports": ["import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "package": "package org.group9.NoInheritance;"}]